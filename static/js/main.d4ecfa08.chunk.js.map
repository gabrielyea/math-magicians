{"version":3,"sources":["logic/operate.js","components/buttons/CalculatorBtn.js","components/display/Display.js","components/calculator/Calculator.js","logic/calculate.js","App.js","index.js"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","mod","Error","CalculatorButton","this","props","number","clickHandler","className","onClick","type","value","React","Component","Display","result","next","total","Calculator","useState","currentOp","setOperation","delegate","setDelegate","numberKeys","Array","from","keys","reverse","cleanState","setCalculatorResult","obj","buttonName","op","updateCurrentOperation","match","includes","parseFloat","error","e","param","target","createButtons","buttonCollection","map","num","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d4ecfa08.chunk.js","sourcesContent":["import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    return one.div(two).toString();\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport default class CalculatorButton extends React.Component {\n  render() {\n    const { number, clickHandler } = this.props;\n    return (\n      <button\n        className={`btn-${number}`}\n        onClick={clickHandler}\n        type=\"button\"\n        value={number}\n      >\n        {number}\n      </button>\n    );\n  }\n}\n\nCalculatorButton.propTypes = {\n  number: PropTypes.string.isRequired,\n  clickHandler: PropTypes.func.isRequired,\n};\n","/* eslint-disable react/prop-types */\nimport './displayStyle.scss';\n// import PropTypes from 'prop-types';\nimport React from 'react';\n\nconst Display = (props) => {\n  const { value } = props;\n\n  const setDisplay = () => {\n    if (value.next) {\n      return value.next;\n    }\n    if (value.total) {\n      return value.total;\n    }\n    return 0;\n  };\n\n  const result = setDisplay();\n\n  return (\n    <div\n      className=\"display-container\"\n      value={result}\n    >\n      {result}\n    </div>\n  );\n};\n\n// Display.propTypes = {\n//   next: PropTypes.string,\n//   total: PropTypes.string,\n// };\n\n// Display.defaultProps = {\n//   next: '',\n//   total: '',\n// };\n\nexport default Display;\n","/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState } from 'react';\nimport './calculatorStyle.scss';\nimport calculate from '../../logic/calculate';\nimport CalculatorButton from '../buttons/CalculatorBtn';\nimport Display from '../display/Display';\n\nexport default function Calculator() {\n  const [currentOp, setOperation] = useState({ total: 0, next: null, operation: null });\n  const [delegate, setDelegate] = useState(0);\n\n  const numberKeys = Array.from(Array(10).keys()).reverse();\n  const specialKeys = ['AC', '+/-', '%'];\n  const operatorKeys = ['รท', 'x', '-', '+', '='];\n  const decimalKey = ['.'];\n\n  const updateCurrentOperation = ({ total, next, operation }) => {\n    const op = currentOp;\n    if (total || total === null) {\n      op.total = total;\n    }\n    if (next || next === null) {\n      op.next = next;\n    }\n    if (operation || operation === null) {\n      op.operation = operation;\n    }\n    return op;\n  };\n\n  const cleanState = () => {\n    setOperation({ next: 0, total: null, operation: null });\n    setDelegate(0);\n  };\n\n  const setCalculatorResult = (value) => {\n    const op = currentOp;\n    try {\n      const results = calculate(op, value);\n      const { next, total, operation } = updateCurrentOperation(results);\n      setOperation({ next, total, operation });\n    } catch (error) {\n      setOperation({ next: 'error', total: null, operation: null });\n      setDelegate(1);\n    }\n  };\n\n  const doFunction = (param) => {\n    const delegateFunctions = [setCalculatorResult, cleanState];\n\n    delegateFunctions[delegate](param);\n  };\n\n  const clickHandler = (e) => {\n    doFunction(e.target.value);\n  };\n\n  const createButtons = (buttonCollection) => {\n    const btns = buttonCollection.map((num) => (\n      <CalculatorButton\n        key={num}\n        number={num.toString()}\n        clickHandler={clickHandler}\n      />\n    ));\n    return btns;\n  };\n\n  return (\n    <div className=\"main-container\">\n      <Display value={currentOp} />\n      <ul className=\"special-container\">\n        {createButtons(specialKeys)}\n      </ul>\n      <ul className=\"numbers-container\">\n        {createButtons(numberKeys)}\n        {createButtons(decimalKey)}\n      </ul>\n      <ul className=\"operator-container\">\n        {createButtons(operatorKeys)}\n      </ul>\n    </div>\n  );\n}\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return {};\n      }\n      return { next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  if (!obj.next && !obj.total) {\n    return {};\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import React from 'react';\nimport Calculator from './components/calculator/Calculator';\n\nconst App = () => (\n  <div className=\"App\">\n    <Calculator />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}