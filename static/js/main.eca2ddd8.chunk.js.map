{"version":3,"sources":["logic/operate.js","components/buttons/CalculatorBtn.js","components/display/Display.js","components/calculator/Calculator.js","logic/calculate.js","App.js","index.js"],"names":["operate","numberOne","numberTwo","operation","one","Big","two","plus","toString","minus","times","div","mod","Error","CalculatorButton","this","props","number","clickHandler","className","onClick","type","value","React","Component","Display","setDisplay","numbers","next","total","result","Calculator","e","setCalculatorResult","target","obj","buttonName","currentOp","state","results","match","includes","parseFloat","setState","updateCurrentOperation","Array","from","keys","reverse","special","operators","decimalDot","bind","numBtns","map","num","specialBtns","btn","operatorBtns","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eca2ddd8.chunk.js","sourcesContent":["import Big from 'big.js';\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne);\n  const two = Big(numberTwo);\n  if (operation === '+') {\n    return one.plus(two).toString();\n  }\n  if (operation === '-') {\n    return one.minus(two).toString();\n  }\n  if (operation === 'x') {\n    return one.times(two).toString();\n  }\n  if (operation === 'รท') {\n    return one.div(two).toString();\n  }\n  if (operation === '%') {\n    return one.mod(two).toString();\n  }\n  throw Error(`Unknown operation '${operation}'`);\n}\n","import PropTypes from 'prop-types';\nimport React from 'react';\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport default class CalculatorButton extends React.Component {\n  render() {\n    const { number, clickHandler } = this.props;\n    return (\n      <button\n        className={`btn-${number}`}\n        onClick={clickHandler}\n        type=\"button\"\n        value={number}\n      >\n        {number}\n      </button>\n    );\n  }\n}\n\nCalculatorButton.propTypes = {\n  number: PropTypes.string.isRequired,\n  clickHandler: PropTypes.func.isRequired,\n};\n","import './displayStyle.scss';\nimport React from 'react';\n\n// eslint-disable-next-line react/prefer-stateless-function\nexport default class Display extends React.Component {\n  setDisplay = (numbers) => {\n    if (numbers.number.next) {\n      return numbers.number.next;\n    }\n    if (numbers.number.total) {\n      return numbers.number.total;\n    }\n    return 0;\n  }\n\n  render() {\n    const result = (this.setDisplay(this.props));\n    return (\n      <div\n        className=\"display-container\"\n        value={result}\n      >\n        {result}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './calculatorStyle.scss';\nimport calculate from '../../logic/calculate';\nimport CalculatorButton from '../buttons/CalculatorBtn';\nimport Display from '../display/Display';\n\nexport default class Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numbers: Array.from(Array(10).keys()).reverse(),\n      special: ['AC', '+/-', '%'],\n      operators: ['รท', '*', '-', '+', '='],\n      decimalDot: '.',\n      currentOp: {\n        total: null,\n        next: null,\n        operation: null,\n      },\n    };\n    this.clickHandler = this.clickHandler.bind(this);\n  }\n\n  clickHandler = (e) => {\n    this.setCalculatorResult(e.target.value);\n  }\n\n  setCalculatorResult = (value) => {\n    const { currentOp } = this.state;\n    const results = calculate(currentOp, value);\n    this.setState({ currentOp: this.updateCurrentOperation(results) });\n  }\n\n  updateCurrentOperation = ({ next, total, operation }) => {\n    const { currentOp } = this.state;\n    if (total || total === null) {\n      currentOp.total = total;\n    }\n    if (next || next === null) {\n      currentOp.next = next;\n    }\n    if (operation || operation === null) {\n      currentOp.operation = operation;\n    }\n    return currentOp;\n  }\n\n  render() {\n    const {\n      numbers, decimalDot, special, operators, currentOp,\n    } = this.state;\n    const numBtns = numbers.map((num) => (\n      <CalculatorButton\n        key={num}\n        number={num.toString()}\n        clickHandler={this.clickHandler}\n      />\n    ));\n    const specialBtns = special.map((btn) => (\n      <CalculatorButton\n        key={btn}\n        number={btn.toString()}\n        clickHandler={this.clickHandler}\n      />\n    ));\n    const operatorBtns = operators.map((btn) => (\n      <CalculatorButton\n        key={btn}\n        number={btn.toString()}\n        clickHandler={this.clickHandler}\n      />\n    ));\n    return (\n      <div className=\"main-container\">\n        <Display number={currentOp} />\n        <ul className=\"special-container\">\n          {specialBtns}\n        </ul>\n        <ul className=\"numbers-container\">\n          {numBtns}\n          <CalculatorButton\n            className=\"dot-btn\"\n            type=\"button\"\n            clickHandler={this.clickHandler}\n            number={decimalDot}\n          />\n        </ul>\n        <ul className=\"operator-container\">\n          {operatorBtns}\n        </ul>\n      </div>\n    );\n  }\n}\n","import operate from './operate';\n\nfunction isNumber(item) {\n  return !!item.match(/[0-9]+/);\n}\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:s      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    };\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {};\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return { next: obj.next + buttonName };\n      }\n      return { next: buttonName };\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      return {\n        next: obj.next + buttonName,\n        total: null,\n      };\n    }\n    return {\n      next: buttonName,\n      total: null,\n    };\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      if (obj.next.includes('.')) {\n        return {};\n      }\n      return { next: `${obj.next}.` };\n    }\n    if (obj.operation) {\n      return { next: '0.' };\n    }\n    if (obj.total) {\n      if (obj.total.includes('.')) {\n        return {};\n      }\n      return { total: `${obj.total}.` };\n    }\n    return { total: '0.' };\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      };\n    }\n    // '=' with no operation, nothing to do\n    return {};\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return { next: (-1 * parseFloat(obj.next)).toString() };\n    }\n    if (obj.total) {\n      return { total: (-1 * parseFloat(obj.total)).toString() };\n    }\n    return {};\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  if (!obj.next && !obj.total) {\n    return {};\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return { operation: buttonName };\n  }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    };\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  };\n}\n","import React from 'react';\nimport Calculator from './components/calculator/Calculator';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <Calculator />\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}